### django/db/migrations/optimizer.py
<<<<<<< SEARCH
for i, operation in enumerate(operations):
    right = True  # Should we reduce on the right or on the left.
    # Compare it to each operation after it
    for j, other in enumerate(operations[i + 1 :]):
        result = operation.reduce(other, app_label)
=======
i = 0
while i < len(operations):
    operation = operations[i]
    # Check for consecutive AddIndex and RemoveIndex cancels
    if isinstance(operation, migrations.AddIndex):
        for j, other in enumerate(operations[i + 1:], start=i + 1):
            if isinstance(other, migrations.RemoveIndex) and operation.model_name == other.model_name and operation.index.name == other.name:
                # Remove both operations
                operations.pop(j)
                operations.pop(i)
                i -= 1  # step back to adjust for removed items
                break
>>>>>>> REPLACE
