{
    "search_replace_edits": [
        "### sklearn/utils/_set_output.py\n<<<<<<< SEARCH\ndef _wrap_in_pandas_container(\n    data_to_wrap,\n    *,\n    columns,\n    index=None,\n):\n=======\ndef _wrap_in_pandas_container(\n    data_to_wrap,\n    *,\n    columns,\n    index=None,\n    original_input_dtypes=None,\n):\n>>>>>>> REPLACE\n",
        "### sklearn/utils/_set_output.py\n<<<<<<< SEARCH\n    return pd.DataFrame(data_to_wrap, index=index, columns=columns)\n=======\n    df = pd.DataFrame(data_to_wrap, index=index, columns=columns)\n    if original_input_dtypes is not None:\n        # Preserve original dtypes for the relevant columns\n        for col in df.columns.intersection(original_input_dtypes.index):\n            df[col] = df[col].astype(original_input_dtypes[col])\n    return df\n>>>>>>> REPLACE\n",
        "### sklearn/utils/_set_output.py\n<<<<<<< SEARCH\n        columns=estimator.get_feature_names_out,\n=======\n        columns=estimator.get_feature_names_out,\n        original_input_dtypes=getattr(original_input, 'dtypes', None),\n>>>>>>> REPLACE\n"
    ]
}