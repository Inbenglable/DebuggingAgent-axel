{
    "search_replace_edits": [
        "### reproduce.py\n<<<<<<< SEARCH\ndef check_excessive_operations(operations):\n    i = 0\n    excessive_operations_found = False\n    while i < len(operations) - 1:\n        if (isinstance(operations[i], migrations.AddIndex) and\n            isinstance(operations[i + 1], migrations.RemoveIndex) and\n            operations[i].index.name == operations[i + 1].name):\n            excessive_operations_found = True\n            break\n        i += 2\n    if excessive_operations_found:\n        raise AssertionError(\"Excessive AddIndex/RemoveIndex operations found.\")\n=======\ndef check_excessive_operations(operations):\n    i = 0\n    non_redundant_operations = []\n    while i < len(operations):\n        if (i < len(operations) - 1 and\n            isinstance(operations[i], migrations.AddIndex) and\n            isinstance(operations[i + 1], migrations.RemoveIndex) and\n            operations[i].index.name == operations[i + 1].name):\n            # Skip both operations if they are redundant\n            i += 2\n        else:\n            # Add the current operation when it is not part of a redundant pair\n            non_redundant_operations.append(operations[i])\n            i += 1\n    return non_redundant_operations\n>>>>>>> REPLACE\n"
    ]
}