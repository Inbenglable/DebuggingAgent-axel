### django/utils/autoreload.py
<<<<<<< SEARCH
    import django.__main__
    django_main_path = Path(django.__main__.__file__)
    py_script = Path(sys.argv[0])

    args = [sys.executable] + ['-W%s' % o for o in sys.warnoptions]
    if py_script == django_main_path:
        # The server was started with `python -m django runserver`.
        args += ['-m', 'django']
=======
    import sys

    args = [sys.executable] + ['-W%s' % o for o in sys.warnoptions]

    # Check if the script was started with -m option
    module_parent = getattr(sys.modules['__main__'], '__spec__', None).parent if getattr(sys.modules['__main__'], '__spec__', None) else ''
    if module_parent:
        # Server started with `python -m pkg runserver`, include `-m pkg` in args
        args += ['-m', module_parent]
>>>>>>> REPLACE

### django/utils/autoreload.py
<<<<<<< SEARCH
    elif not py_script.exists():
        # sys.argv[0] may not exist for several reasons on Windows.
        # It may exist with a .exe extension or have a -script.py suffix.
        exe_entrypoint = py_script.with_suffix('.exe')
        if exe_entrypoint.exists():
            # Should be executed directly, ignoring sys.executable.
            # TODO: Remove str() when dropping support for PY37.
            # args parameter accepts path-like on Windows from Python 3.8.
            return [str(exe_entrypoint), *sys.argv[1:]]
        script_entrypoint = py_script.with_name('%s-script.py' % py_script.name)
        if script_entrypoint.exists():
            # Should be executed as usual.
            # TODO: Remove str() when dropping support for PY37.
            # args parameter accepts path-like on Windows from Python 3.8.
            return [*args, str(script_entrypoint), *sys.argv[1:]]
        raise RuntimeError('Script %s does not exist.' % py_script)
    else:
=======
    elif not Path(sys.argv[0]).exists():
        raise RuntimeError('Script %s does not exist.' % sys.argv[0])
>>>>>>> REPLACE
