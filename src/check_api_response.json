{
    "search_method_in_codebase(\"__eq__\")": [
        {
            "name": "Number.__eq__",
            "code": "    def __eq__(self, other):\n        raise NotImplementedError('%s needs .__eq__() method' %\n            (self.__class__.__name__))\n",
            "path": "sympy/core/numbers.py",
            "type": "method",
            "start_line": 769,
            "end_line": 771
        },
        {
            "name": "Float.__eq__",
            "code": "    def __eq__(self, other):\n        from sympy.logic.boolalg import Boolean\n        try:\n            other = _sympify(other)\n        except SympifyError:\n            return NotImplemented\n        if not self:\n            return not other\n        if isinstance(other, Boolean):\n            return not self\n        if other.is_NumberSymbol:\n            if other.is_irrational:\n                return False\n            return other.__eq__(self)\n        if other.is_Float:\n            # comparison is exact\n            # so Float(.1, 3) != Float(.1, 33)\n            return self._mpf_ == other._mpf_\n        if other.is_Rational:\n            return other.__eq__(self)\n        if other.is_Number:\n            # numbers should compare at the same precision;\n            # all _as_mpf_val routines should be sure to abide\n            # by the request to change the prec if necessary; if\n            # they don't, the equality test will fail since it compares\n            # the mpf tuples\n            ompf = other._as_mpf_val(self._prec)\n            return bool(mlib.mpf_eq(self._mpf_, ompf))\n        return False    # Float != non-Number\n",
            "path": "sympy/core/numbers.py",
            "type": "method",
            "start_line": 1383,
            "end_line": 1411
        },
        {
            "name": "Rational.__eq__",
            "code": "    def __eq__(self, other):\n        from sympy.core.power import integer_log\n        try:\n            other = _sympify(other)\n        except SympifyError:\n            return NotImplemented\n        if not isinstance(other, Number):\n            # S(0) == S.false is False\n            # S(0) == False is True\n            return False\n        if not self:\n            return not other\n        if other.is_NumberSymbol:\n            if other.is_irrational:\n                return False\n            return other.__eq__(self)\n        if other.is_Rational:\n            # a Rational is always in reduced form so will never be 2/4\n            # so we can just check equivalence of args\n            return self.p == other.p and self.q == other.q\n        if other.is_Float:\n            # all Floats have a denominator that is a power of 2\n            # so if self doesn't, it can't be equal to other\n            if self.q & (self.q - 1):\n                return False\n            s, m, t = other._mpf_[:3]\n            if s:\n                m = -m\n            if not t:\n                # other is an odd integer\n                if not self.is_Integer or self.is_even:\n                    return False\n                return m == self.p\n            if t > 0:\n                # other is an even integer\n                if not self.is_Integer:\n                    return False\n                # does m*2**t == self.p\n                return self.p and not self.p % m and \\\n                    integer_log(self.p//m, 2) == (t, True)\n            # does non-integer s*m/2**-t = p/q?\n            if self.is_Integer:\n                return False\n            return m == self.p and integer_log(self.q, 2) == (-t, True)\n        return False\n",
            "path": "sympy/core/numbers.py",
            "type": "method",
            "start_line": 1862,
            "end_line": 1906
        },
        {
            "name": "Integer.__eq__",
            "code": "    def __eq__(self, other):\n        if isinstance(other, int):\n            return (self.p == other)\n        elif isinstance(other, Integer):\n            return (self.p == other.p)\n        return Rational.__eq__(self, other)\n",
            "path": "sympy/core/numbers.py",
            "type": "method",
            "start_line": 2236,
            "end_line": 2241
        },
        {
            "name": "Infinity.__eq__",
            "code": "    def __eq__(self, other):\n        return other is S.Infinity or other == float('inf')\n",
            "path": "sympy/core/numbers.py",
            "type": "method",
            "start_line": 2963,
            "end_line": 2964
        },
        {
            "name": "NegativeInfinity.__eq__",
            "code": "    def __eq__(self, other):\n        return other is S.NegativeInfinity or other == float('-inf')\n",
            "path": "sympy/core/numbers.py",
            "type": "method",
            "start_line": 3126,
            "end_line": 3127
        },
        {
            "name": "NaN.__eq__",
            "code": "    def __eq__(self, other):\n        # NaN is structurally equal to another NaN\n        return other is S.NaN\n",
            "path": "sympy/core/numbers.py",
            "type": "method",
            "start_line": 3261,
            "end_line": 3263
        },
        {
            "name": "NumberSymbol.__eq__",
            "code": "    def __eq__(self, other):\n        try:\n            other = _sympify(other)\n        except SympifyError:\n            return NotImplemented\n        if self is other:\n            return True\n        if other.is_Number and self.is_irrational:\n            return False\n\n        return False    # NumberSymbol != non-(Number|self)\n",
            "path": "sympy/core/numbers.py",
            "type": "method",
            "start_line": 3388,
            "end_line": 3398
        }
    ]
}