### django/db/backends/base/schema.py
<<<<<<< SEARCH
            if len(constraint_names) != 1:
                raise ValueError("Found wrong number (%s) of constraints for %s(%s)" % (
                    len(constraint_names),
                    model._meta.db_table,
                    ", ".join(columns),
                ))
=======
            # Allow either one or two constraints to account for unique and index constraints.
            if not (1 <= len(constraint_names) <= 2):
                raise ValueError("Found wrong number (%s) of constraints for %s(%s) - expected 1 or 2" % (
                    len(constraint_names),
                    model._meta.db_table,
                    ", ".join(columns),
                ))
>>>>>>> REPLACE

### django/db/backends/base/schema.py
<<<<<<< SEARCH
            model, columns, exclude=meta_constraint_names | meta_index_names,
=======
            # By default, we want to filter constraints excluding known meta constraints.
            # Ensure we don't re-exclude index-together related constraints here if refactoring to indexes.
            model, columns, unique=False, exclude=meta_constraint_names | meta_index_names,
>>>>>>> REPLACE
