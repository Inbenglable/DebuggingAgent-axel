{
    "search_replace_edits": [
        "### django/db/backends/postgresql/client.py\n<<<<<<< SEARCH\n        passwd = conn_params.get('password', '')\n=======\n        passwd = conn_params.get('password', '')\n        env = os.environ.copy()\n        if passwd:\n            env['PGPASSWORD'] = passwd\n>>>>>>> REPLACE\n",
        "### django/db/backends/postgresql/client.py\n<<<<<<< SEARCH\n            if passwd:\n                # Create temporary .pgpass file.\n                temp_pgpass = NamedTemporaryFile(mode='w+')\n                try:\n                    print(\n                        _escape_pgpass(host) or '*',\n                        str(port) or '*',\n                        _escape_pgpass(dbname) or '*',\n                        _escape_pgpass(user) or '*',\n                        _escape_pgpass(passwd),\n                        file=temp_pgpass,\n                        sep=':',\n                        flush=True,\n                    )\n                    os.environ['PGPASSFILE'] = temp_pgpass.name\n                except UnicodeEncodeError:\n                    # If the current locale can't encode the data, let the\n                    # user input the password manually.\n                    pass\n            # Allow SIGINT to pass to psql to abort queries.\n            signal.signal(signal.SIGINT, signal.SIG_IGN)\n            subprocess.check_call(args)\n=======\n            # Allow SIGINT to pass to psql to abort queries.\n            signal.signal(signal.SIG_IGN, signal.SIG_IGN)\n            subprocess.run(args, env=env)\n>>>>>>> REPLACE\n"
    ]
}