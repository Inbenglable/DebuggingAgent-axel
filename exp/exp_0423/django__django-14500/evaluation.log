Testing against Django installed in '/data/swe-fl/TMP/testbed/django__django-14500/django'
Importing application migrations
Found 22 test(s).
Operations to perform:
  Synchronize unmigrated apps: auth, contenttypes, messages, migrations, sessions, staticfiles
  Apply all migrations: admin, sites
Synchronizing apps without migrations:
  Creating tables...
    Creating table django_content_type
    Creating table auth_permission
    Creating table auth_group
    Creating table auth_user
    Creating table django_session
    Creating table migrations_modelwithcustombase
    Creating table migrations_unmigratedmodel
    Running deferred SQL...
Running migrations:
  Applying admin.0001_initial... OK
  Applying admin.0002_logentry_remove_auto_add... OK
  Applying admin.0003_logentry_add_action_flag_choices... OK
  Applying sites.0001_initial... OK
  Applying sites.0002_alter_domain_unique... OK
Operations to perform:
  Synchronize unmigrated apps: auth, contenttypes, messages, migrations, sessions, staticfiles
  Apply all migrations: admin, sites
Synchronizing apps without migrations:
  Creating tables...
    Creating table django_content_type
    Creating table auth_permission
    Creating table auth_group
    Creating table auth_user
    Creating table django_session
    Creating table migrations_modelwithcustombase
    Creating table migrations_unmigratedmodel
    Running deferred SQL...
Running migrations:
  Applying admin.0001_initial... OK
  Applying admin.0002_logentry_remove_auto_add... OK
  Applying admin.0003_logentry_add_action_flag_choices... OK
  Applying sites.0001_initial... OK
  Applying sites.0002_alter_domain_unique... OK
System check identified no issues (0 silenced).

Creating test database for alias 'default' ('file:memorydb_default?mode=memory&cache=shared')...
Creating test database for alias 'other' ('file:memorydb_other?mode=memory&cache=shared')...
test_alter_id_type_with_fk (migrations.test_executor.ExecutorTests) ... ERROR
test_apply_all_replaced_marks_replacement_as_applied (migrations.test_executor.ExecutorTests)
Applying all replaced migrations marks replacement as applied (#24628). ... ok
test_atomic_operation_in_non_atomic_migration (migrations.test_executor.ExecutorTests)
An atomic operation is properly rolled back inside a non-atomic ... ok
test_custom_user (migrations.test_executor.ExecutorTests)
Regression test for #22325 - references to a custom user model defined in the ... ERROR
test_detect_soft_applied_add_field_manytomanyfield (migrations.test_executor.ExecutorTests)
executor.detect_soft_applied() detects ManyToManyField tables from an ... ERROR
test_empty_plan (migrations.test_executor.ExecutorTests)
Re-planning a full migration of a fully-migrated set doesn't ... ERROR
test_migrate_marks_replacement_applied_even_if_it_did_nothing (migrations.test_executor.ExecutorTests)
A new squash migration will be marked as applied even if all its ... ok
test_migrate_marks_replacement_unapplied (migrations.test_executor.ExecutorTests) ... ERROR
test_migrations_applied_and_recorded_atomically (migrations.test_executor.ExecutorTests)
Migrations are applied and recorded atomically. ... ok
test_migrations_not_applied_on_deferred_sql_failure (migrations.test_executor.ExecutorTests)
Migrations are not recorded if deferred SQL application fails. ... ok
test_mixed_plan_not_supported (migrations.test_executor.ExecutorTests)
Although the MigrationExecutor interfaces allows for mixed migration ... ERROR
test_non_atomic_migration (migrations.test_executor.ExecutorTests)
Applying a non-atomic migration works as expected. ... ok
test_process_callback (migrations.test_executor.ExecutorTests)
#24129 - Tests callback process ... FAIL
test_run (migrations.test_executor.ExecutorTests)
Tests running a simple set of migrations. ... FAIL
test_run_with_squashed (migrations.test_executor.ExecutorTests)
Tests running a squashed migration from zero (should ignore what it replaces) ... FAIL
test_soft_apply (migrations.test_executor.ExecutorTests)
Tests detection of initial migrations already having been applied. ... FAIL
test_unrelated_applied_migrations_mutate_state (migrations.test_executor.ExecutorTests)
#26647 - Unrelated applied migrations should be part of the final ... ERROR
test_unrelated_model_lookups_backwards (migrations.test_executor.ExecutorTests)
#24123 - All models of apps being unapplied which are ... ERROR
test_unrelated_model_lookups_forwards (migrations.test_executor.ExecutorTests)
#24123 - All models of apps already applied which are ... ERROR
test_backwards_nothing_to_do (migrations.test_executor.ExecutorUnitTests)
If the current state satisfies the given target, do nothing. ... ok
test_minimize_rollbacks (migrations.test_executor.ExecutorUnitTests)
Minimize unnecessary rollbacks in connected apps. ... ok
test_minimize_rollbacks_branchy (migrations.test_executor.ExecutorUnitTests)
Minimize rollbacks when target has multiple in-app children. ... ok

======================================================================
ERROR: test_alter_id_type_with_fk (migrations.test_executor.ExecutorTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/data/swe-fl/TMP/testbed/django__django-14500/django/test/utils.py", line 430, in inner
    return func(*args, **kwargs)
  File "/data/swe-fl/TMP/testbed/django__django-14500/tests/migrations/test_executor.py", line 610, in test_alter_id_type_with_fk
    executor.migrate([("author_app", None)], fake=True)
  File "/data/swe-fl/TMP/testbed/django__django-14500/django/db/migrations/executor.py", line 121, in migrate
    state = self._migrate_all_backwards(plan, full_plan, fake=fake)
  File "/data/swe-fl/TMP/testbed/django__django-14500/django/db/migrations/executor.py", line 196, in _migrate_all_backwards
    self.unapply_migration(states[migration], migration, fake=fake)
  File "/data/swe-fl/TMP/testbed/django__django-14500/django/db/migrations/executor.py", line 258, in unapply_migration
    self.recorder.record_unapplied(migration.app_label, migration.name)
  File "/data/swe-fl/TMP/testbed/django__django-14500/django/db/migrations/recorder.py", line 95, in record_unapplied
    for squashed_migration in self.migration_qs.filter(app=app, replaced_migrations__contains=name).values_list('name', flat=True):
  File "/data/swe-fl/TMP/testbed/django__django-14500/django/db/models/query.py", line 962, in filter
    return self._filter_or_exclude(False, args, kwargs)
  File "/data/swe-fl/TMP/testbed/django__django-14500/django/db/models/query.py", line 980, in _filter_or_exclude
    clone._filter_or_exclude_inplace(negate, args, kwargs)
  File "/data/swe-fl/TMP/testbed/django__django-14500/django/db/models/query.py", line 987, in _filter_or_exclude_inplace
    self._query.add_q(Q(*args, **kwargs))
  File "/data/swe-fl/TMP/testbed/django__django-14500/django/db/models/sql/query.py", line 1375, in add_q
    clause, _ = self._add_q(q_object, self.used_aliases)
  File "/data/swe-fl/TMP/testbed/django__django-14500/django/db/models/sql/query.py", line 1394, in _add_q
    child_clause, needed_inner = self.build_filter(
  File "/data/swe-fl/TMP/testbed/django__django-14500/django/db/models/sql/query.py", line 1269, in build_filter
    lookups, parts, reffed_expression = self.solve_lookup_type(arg)
  File "/data/swe-fl/TMP/testbed/django__django-14500/django/db/models/sql/query.py", line 1098, in solve_lookup_type
    _, field, _, lookup_parts = self.names_to_path(lookup_splitted, self.get_meta())
  File "/data/swe-fl/TMP/testbed/django__django-14500/django/db/models/sql/query.py", line 1520, in names_to_path
    raise FieldError("Cannot resolve keyword '%s' into field. "
django.core.exceptions.FieldError: Cannot resolve keyword 'replaced_migrations' into field. Choices are: app, applied, id, name

======================================================================
ERROR: test_custom_user (migrations.test_executor.ExecutorTests)
Regression test for #22325 - references to a custom user model defined in the
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/data/swe-fl/TMP/testbed/django__django-14500/django/test/utils.py", line 430, in inner
    return func(*args, **kwargs)
  File "/data/swe-fl/TMP/testbed/django__django-14500/tests/migrations/test_executor.py", line 347, in test_custom_user
    executor.migrate([("migrations", None)])
  File "/data/swe-fl/TMP/testbed/django__django-14500/django/db/migrations/executor.py", line 121, in migrate
    state = self._migrate_all_backwards(plan, full_plan, fake=fake)
  File "/data/swe-fl/TMP/testbed/django__django-14500/django/db/migrations/executor.py", line 196, in _migrate_all_backwards
    self.unapply_migration(states[migration], migration, fake=fake)
  File "/data/swe-fl/TMP/testbed/django__django-14500/django/db/migrations/executor.py", line 258, in unapply_migration
    self.recorder.record_unapplied(migration.app_label, migration.name)
  File "/data/swe-fl/TMP/testbed/django__django-14500/django/db/migrations/recorder.py", line 95, in record_unapplied
    for squashed_migration in self.migration_qs.filter(app=app, replaced_migrations__contains=name).values_list('name', flat=True):
  File "/data/swe-fl/TMP/testbed/django__django-14500/django/db/models/query.py", line 962, in filter
    return self._filter_or_exclude(False, args, kwargs)
  File "/data/swe-fl/TMP/testbed/django__django-14500/django/db/models/query.py", line 980, in _filter_or_exclude
    clone._filter_or_exclude_inplace(negate, args, kwargs)
  File "/data/swe-fl/TMP/testbed/django__django-14500/django/db/models/query.py", line 987, in _filter_or_exclude_inplace
    self._query.add_q(Q(*args, **kwargs))
  File "/data/swe-fl/TMP/testbed/django__django-14500/django/db/models/sql/query.py", line 1375, in add_q
    clause, _ = self._add_q(q_object, self.used_aliases)
  File "/data/swe-fl/TMP/testbed/django__django-14500/django/db/models/sql/query.py", line 1394, in _add_q
    child_clause, needed_inner = self.build_filter(
  File "/data/swe-fl/TMP/testbed/django__django-14500/django/db/models/sql/query.py", line 1269, in build_filter
    lookups, parts, reffed_expression = self.solve_lookup_type(arg)
  File "/data/swe-fl/TMP/testbed/django__django-14500/django/db/models/sql/query.py", line 1098, in solve_lookup_type
    _, field, _, lookup_parts = self.names_to_path(lookup_splitted, self.get_meta())
  File "/data/swe-fl/TMP/testbed/django__django-14500/django/db/models/sql/query.py", line 1520, in names_to_path
    raise FieldError("Cannot resolve keyword '%s' into field. "
django.core.exceptions.FieldError: Cannot resolve keyword 'replaced_migrations' into field. Choices are: app, applied, id, name

======================================================================
ERROR: test_detect_soft_applied_add_field_manytomanyfield (migrations.test_executor.ExecutorTests)
executor.detect_soft_applied() detects ManyToManyField tables from an
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/data/swe-fl/TMP/testbed/django__django-14500/django/test/utils.py", line 430, in inner
    return func(*args, **kwargs)
  File "/data/swe-fl/TMP/testbed/django__django-14500/tests/migrations/test_executor.py", line 390, in test_detect_soft_applied_add_field_manytomanyfield
    executor.migrate([("migrations", None)], fake=True)
  File "/data/swe-fl/TMP/testbed/django__django-14500/django/db/migrations/executor.py", line 121, in migrate
    state = self._migrate_all_backwards(plan, full_plan, fake=fake)
  File "/data/swe-fl/TMP/testbed/django__django-14500/django/db/migrations/executor.py", line 196, in _migrate_all_backwards
    self.unapply_migration(states[migration], migration, fake=fake)
  File "/data/swe-fl/TMP/testbed/django__django-14500/django/db/migrations/executor.py", line 258, in unapply_migration
    self.recorder.record_unapplied(migration.app_label, migration.name)
  File "/data/swe-fl/TMP/testbed/django__django-14500/django/db/migrations/recorder.py", line 95, in record_unapplied
    for squashed_migration in self.migration_qs.filter(app=app, replaced_migrations__contains=name).values_list('name', flat=True):
  File "/data/swe-fl/TMP/testbed/django__django-14500/django/db/models/query.py", line 962, in filter
    return self._filter_or_exclude(False, args, kwargs)
  File "/data/swe-fl/TMP/testbed/django__django-14500/django/db/models/query.py", line 980, in _filter_or_exclude
    clone._filter_or_exclude_inplace(negate, args, kwargs)
  File "/data/swe-fl/TMP/testbed/django__django-14500/django/db/models/query.py", line 987, in _filter_or_exclude_inplace
    self._query.add_q(Q(*args, **kwargs))
  File "/data/swe-fl/TMP/testbed/django__django-14500/django/db/models/sql/query.py", line 1375, in add_q
    clause, _ = self._add_q(q_object, self.used_aliases)
  File "/data/swe-fl/TMP/testbed/django__django-14500/django/db/models/sql/query.py", line 1394, in _add_q
    child_clause, needed_inner = self.build_filter(
  File "/data/swe-fl/TMP/testbed/django__django-14500/django/db/models/sql/query.py", line 1269, in build_filter
    lookups, parts, reffed_expression = self.solve_lookup_type(arg)
  File "/data/swe-fl/TMP/testbed/django__django-14500/django/db/models/sql/query.py", line 1098, in solve_lookup_type
    _, field, _, lookup_parts = self.names_to_path(lookup_splitted, self.get_meta())
  File "/data/swe-fl/TMP/testbed/django__django-14500/django/db/models/sql/query.py", line 1520, in names_to_path
    raise FieldError("Cannot resolve keyword '%s' into field. "
django.core.exceptions.FieldError: Cannot resolve keyword 'replaced_migrations' into field. Choices are: app, applied, id, name

======================================================================
ERROR: test_empty_plan (migrations.test_executor.ExecutorTests)
Re-planning a full migration of a fully-migrated set doesn't
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/data/swe-fl/TMP/testbed/django__django-14500/django/test/utils.py", line 430, in inner
    return func(*args, **kwargs)
  File "/data/swe-fl/TMP/testbed/django__django-14500/tests/migrations/test_executor.py", line 192, in test_empty_plan
    executor.recorder.record_unapplied("migrations2", "0001_initial")
  File "/data/swe-fl/TMP/testbed/django__django-14500/django/db/migrations/recorder.py", line 95, in record_unapplied
    for squashed_migration in self.migration_qs.filter(app=app, replaced_migrations__contains=name).values_list('name', flat=True):
  File "/data/swe-fl/TMP/testbed/django__django-14500/django/db/models/query.py", line 962, in filter
    return self._filter_or_exclude(False, args, kwargs)
  File "/data/swe-fl/TMP/testbed/django__django-14500/django/db/models/query.py", line 980, in _filter_or_exclude
    clone._filter_or_exclude_inplace(negate, args, kwargs)
  File "/data/swe-fl/TMP/testbed/django__django-14500/django/db/models/query.py", line 987, in _filter_or_exclude_inplace
    self._query.add_q(Q(*args, **kwargs))
  File "/data/swe-fl/TMP/testbed/django__django-14500/django/db/models/sql/query.py", line 1375, in add_q
    clause, _ = self._add_q(q_object, self.used_aliases)
  File "/data/swe-fl/TMP/testbed/django__django-14500/django/db/models/sql/query.py", line 1394, in _add_q
    child_clause, needed_inner = self.build_filter(
  File "/data/swe-fl/TMP/testbed/django__django-14500/django/db/models/sql/query.py", line 1269, in build_filter
    lookups, parts, reffed_expression = self.solve_lookup_type(arg)
  File "/data/swe-fl/TMP/testbed/django__django-14500/django/db/models/sql/query.py", line 1098, in solve_lookup_type
    _, field, _, lookup_parts = self.names_to_path(lookup_splitted, self.get_meta())
  File "/data/swe-fl/TMP/testbed/django__django-14500/django/db/models/sql/query.py", line 1520, in names_to_path
    raise FieldError("Cannot resolve keyword '%s' into field. "
django.core.exceptions.FieldError: Cannot resolve keyword 'replaced_migrations' into field. Choices are: app, applied, id, name

======================================================================
ERROR: test_migrate_marks_replacement_unapplied (migrations.test_executor.ExecutorTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/data/swe-fl/TMP/testbed/django__django-14500/django/test/utils.py", line 430, in inner
    return func(*args, **kwargs)
  File "/data/swe-fl/TMP/testbed/django__django-14500/tests/migrations/test_executor.py", line 667, in test_migrate_marks_replacement_unapplied
    executor.migrate([('migrations', None)])
  File "/data/swe-fl/TMP/testbed/django__django-14500/django/db/migrations/executor.py", line 121, in migrate
    state = self._migrate_all_backwards(plan, full_plan, fake=fake)
  File "/data/swe-fl/TMP/testbed/django__django-14500/django/db/migrations/executor.py", line 196, in _migrate_all_backwards
    self.unapply_migration(states[migration], migration, fake=fake)
  File "/data/swe-fl/TMP/testbed/django__django-14500/django/db/migrations/executor.py", line 256, in unapply_migration
    self.recorder.record_unapplied(app_label, name)
  File "/data/swe-fl/TMP/testbed/django__django-14500/django/db/migrations/recorder.py", line 95, in record_unapplied
    for squashed_migration in self.migration_qs.filter(app=app, replaced_migrations__contains=name).values_list('name', flat=True):
  File "/data/swe-fl/TMP/testbed/django__django-14500/django/db/models/query.py", line 962, in filter
    return self._filter_or_exclude(False, args, kwargs)
  File "/data/swe-fl/TMP/testbed/django__django-14500/django/db/models/query.py", line 980, in _filter_or_exclude
    clone._filter_or_exclude_inplace(negate, args, kwargs)
  File "/data/swe-fl/TMP/testbed/django__django-14500/django/db/models/query.py", line 987, in _filter_or_exclude_inplace
    self._query.add_q(Q(*args, **kwargs))
  File "/data/swe-fl/TMP/testbed/django__django-14500/django/db/models/sql/query.py", line 1375, in add_q
    clause, _ = self._add_q(q_object, self.used_aliases)
  File "/data/swe-fl/TMP/testbed/django__django-14500/django/db/models/sql/query.py", line 1394, in _add_q
    child_clause, needed_inner = self.build_filter(
  File "/data/swe-fl/TMP/testbed/django__django-14500/django/db/models/sql/query.py", line 1269, in build_filter
    lookups, parts, reffed_expression = self.solve_lookup_type(arg)
  File "/data/swe-fl/TMP/testbed/django__django-14500/django/db/models/sql/query.py", line 1098, in solve_lookup_type
    _, field, _, lookup_parts = self.names_to_path(lookup_splitted, self.get_meta())
  File "/data/swe-fl/TMP/testbed/django__django-14500/django/db/models/sql/query.py", line 1520, in names_to_path
    raise FieldError("Cannot resolve keyword '%s' into field. "
django.core.exceptions.FieldError: Cannot resolve keyword 'replaced_migrations' into field. Choices are: app, applied, id, name

======================================================================
ERROR: test_mixed_plan_not_supported (migrations.test_executor.ExecutorTests)
Although the MigrationExecutor interfaces allows for mixed migration
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/data/swe-fl/TMP/testbed/django__django-14500/django/test/utils.py", line 430, in inner
    return func(*args, **kwargs)
  File "/data/swe-fl/TMP/testbed/django__django-14500/tests/migrations/test_executor.py", line 245, in test_mixed_plan_not_supported
    executor.migrate([
  File "/data/swe-fl/TMP/testbed/django__django-14500/django/db/migrations/executor.py", line 121, in migrate
    state = self._migrate_all_backwards(plan, full_plan, fake=fake)
  File "/data/swe-fl/TMP/testbed/django__django-14500/django/db/migrations/executor.py", line 196, in _migrate_all_backwards
    self.unapply_migration(states[migration], migration, fake=fake)
  File "/data/swe-fl/TMP/testbed/django__django-14500/django/db/migrations/executor.py", line 258, in unapply_migration
    self.recorder.record_unapplied(migration.app_label, migration.name)
  File "/data/swe-fl/TMP/testbed/django__django-14500/django/db/migrations/recorder.py", line 95, in record_unapplied
    for squashed_migration in self.migration_qs.filter(app=app, replaced_migrations__contains=name).values_list('name', flat=True):
  File "/data/swe-fl/TMP/testbed/django__django-14500/django/db/models/query.py", line 962, in filter
    return self._filter_or_exclude(False, args, kwargs)
  File "/data/swe-fl/TMP/testbed/django__django-14500/django/db/models/query.py", line 980, in _filter_or_exclude
    clone._filter_or_exclude_inplace(negate, args, kwargs)
  File "/data/swe-fl/TMP/testbed/django__django-14500/django/db/models/query.py", line 987, in _filter_or_exclude_inplace
    self._query.add_q(Q(*args, **kwargs))
  File "/data/swe-fl/TMP/testbed/django__django-14500/django/db/models/sql/query.py", line 1375, in add_q
    clause, _ = self._add_q(q_object, self.used_aliases)
  File "/data/swe-fl/TMP/testbed/django__django-14500/django/db/models/sql/query.py", line 1394, in _add_q
    child_clause, needed_inner = self.build_filter(
  File "/data/swe-fl/TMP/testbed/django__django-14500/django/db/models/sql/query.py", line 1269, in build_filter
    lookups, parts, reffed_expression = self.solve_lookup_type(arg)
  File "/data/swe-fl/TMP/testbed/django__django-14500/django/db/models/sql/query.py", line 1098, in solve_lookup_type
    _, field, _, lookup_parts = self.names_to_path(lookup_splitted, self.get_meta())
  File "/data/swe-fl/TMP/testbed/django__django-14500/django/db/models/sql/query.py", line 1520, in names_to_path
    raise FieldError("Cannot resolve keyword '%s' into field. "
django.core.exceptions.FieldError: Cannot resolve keyword 'replaced_migrations' into field. Choices are: app, applied, id, name

======================================================================
ERROR: test_unrelated_applied_migrations_mutate_state (migrations.test_executor.ExecutorTests)
#26647 - Unrelated applied migrations should be part of the final
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/data/swe-fl/TMP/testbed/django__django-14500/django/test/utils.py", line 430, in inner
    return func(*args, **kwargs)
  File "/data/swe-fl/TMP/testbed/django__django-14500/tests/migrations/test_executor.py", line 523, in test_unrelated_applied_migrations_mutate_state
    state = executor.migrate([
  File "/data/swe-fl/TMP/testbed/django__django-14500/django/db/migrations/executor.py", line 121, in migrate
    state = self._migrate_all_backwards(plan, full_plan, fake=fake)
  File "/data/swe-fl/TMP/testbed/django__django-14500/django/db/migrations/executor.py", line 196, in _migrate_all_backwards
    self.unapply_migration(states[migration], migration, fake=fake)
  File "/data/swe-fl/TMP/testbed/django__django-14500/django/db/migrations/executor.py", line 258, in unapply_migration
    self.recorder.record_unapplied(migration.app_label, migration.name)
  File "/data/swe-fl/TMP/testbed/django__django-14500/django/db/migrations/recorder.py", line 95, in record_unapplied
    for squashed_migration in self.migration_qs.filter(app=app, replaced_migrations__contains=name).values_list('name', flat=True):
  File "/data/swe-fl/TMP/testbed/django__django-14500/django/db/models/query.py", line 962, in filter
    return self._filter_or_exclude(False, args, kwargs)
  File "/data/swe-fl/TMP/testbed/django__django-14500/django/db/models/query.py", line 980, in _filter_or_exclude
    clone._filter_or_exclude_inplace(negate, args, kwargs)
  File "/data/swe-fl/TMP/testbed/django__django-14500/django/db/models/query.py", line 987, in _filter_or_exclude_inplace
    self._query.add_q(Q(*args, **kwargs))
  File "/data/swe-fl/TMP/testbed/django__django-14500/django/db/models/sql/query.py", line 1375, in add_q
    clause, _ = self._add_q(q_object, self.used_aliases)
  File "/data/swe-fl/TMP/testbed/django__django-14500/django/db/models/sql/query.py", line 1394, in _add_q
    child_clause, needed_inner = self.build_filter(
  File "/data/swe-fl/TMP/testbed/django__django-14500/django/db/models/sql/query.py", line 1269, in build_filter
    lookups, parts, reffed_expression = self.solve_lookup_type(arg)
  File "/data/swe-fl/TMP/testbed/django__django-14500/django/db/models/sql/query.py", line 1098, in solve_lookup_type
    _, field, _, lookup_parts = self.names_to_path(lookup_splitted, self.get_meta())
  File "/data/swe-fl/TMP/testbed/django__django-14500/django/db/models/sql/query.py", line 1520, in names_to_path
    raise FieldError("Cannot resolve keyword '%s' into field. "
django.core.exceptions.FieldError: Cannot resolve keyword 'replaced_migrations' into field. Choices are: app, applied, id, name

======================================================================
ERROR: test_unrelated_model_lookups_backwards (migrations.test_executor.ExecutorTests)
#24123 - All models of apps being unapplied which are
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/data/swe-fl/TMP/testbed/django__django-14500/tests/migrations/test_executor.py", line 486, in test_unrelated_model_lookups_backwards
    executor.migrate([("lookuperror_a", None)])
  File "/data/swe-fl/TMP/testbed/django__django-14500/django/db/migrations/executor.py", line 121, in migrate
    state = self._migrate_all_backwards(plan, full_plan, fake=fake)
  File "/data/swe-fl/TMP/testbed/django__django-14500/django/db/migrations/executor.py", line 196, in _migrate_all_backwards
    self.unapply_migration(states[migration], migration, fake=fake)
  File "/data/swe-fl/TMP/testbed/django__django-14500/django/db/migrations/executor.py", line 258, in unapply_migration
    self.recorder.record_unapplied(migration.app_label, migration.name)
  File "/data/swe-fl/TMP/testbed/django__django-14500/django/db/migrations/recorder.py", line 95, in record_unapplied
    for squashed_migration in self.migration_qs.filter(app=app, replaced_migrations__contains=name).values_list('name', flat=True):
  File "/data/swe-fl/TMP/testbed/django__django-14500/django/db/models/query.py", line 962, in filter
    return self._filter_or_exclude(False, args, kwargs)
  File "/data/swe-fl/TMP/testbed/django__django-14500/django/db/models/query.py", line 980, in _filter_or_exclude
    clone._filter_or_exclude_inplace(negate, args, kwargs)
  File "/data/swe-fl/TMP/testbed/django__django-14500/django/db/models/query.py", line 987, in _filter_or_exclude_inplace
    self._query.add_q(Q(*args, **kwargs))
  File "/data/swe-fl/TMP/testbed/django__django-14500/django/db/models/sql/query.py", line 1375, in add_q
    clause, _ = self._add_q(q_object, self.used_aliases)
  File "/data/swe-fl/TMP/testbed/django__django-14500/django/db/models/sql/query.py", line 1394, in _add_q
    child_clause, needed_inner = self.build_filter(
  File "/data/swe-fl/TMP/testbed/django__django-14500/django/db/models/sql/query.py", line 1269, in build_filter
    lookups, parts, reffed_expression = self.solve_lookup_type(arg)
  File "/data/swe-fl/TMP/testbed/django__django-14500/django/db/models/sql/query.py", line 1098, in solve_lookup_type
    _, field, _, lookup_parts = self.names_to_path(lookup_splitted, self.get_meta())
  File "/data/swe-fl/TMP/testbed/django__django-14500/django/db/models/sql/query.py", line 1520, in names_to_path
    raise FieldError("Cannot resolve keyword '%s' into field. "
django.core.exceptions.FieldError: Cannot resolve keyword 'replaced_migrations' into field. Choices are: app, applied, id, name

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/data/swe-fl/TMP/testbed/django__django-14500/django/test/utils.py", line 430, in inner
    return func(*args, **kwargs)
  File "/data/swe-fl/TMP/testbed/django__django-14500/tests/migrations/test_executor.py", line 492, in test_unrelated_model_lookups_backwards
    executor.migrate([
  File "/data/swe-fl/TMP/testbed/django__django-14500/django/db/migrations/executor.py", line 121, in migrate
    state = self._migrate_all_backwards(plan, full_plan, fake=fake)
  File "/data/swe-fl/TMP/testbed/django__django-14500/django/db/migrations/executor.py", line 196, in _migrate_all_backwards
    self.unapply_migration(states[migration], migration, fake=fake)
  File "/data/swe-fl/TMP/testbed/django__django-14500/django/db/migrations/executor.py", line 258, in unapply_migration
    self.recorder.record_unapplied(migration.app_label, migration.name)
  File "/data/swe-fl/TMP/testbed/django__django-14500/django/db/migrations/recorder.py", line 95, in record_unapplied
    for squashed_migration in self.migration_qs.filter(app=app, replaced_migrations__contains=name).values_list('name', flat=True):
  File "/data/swe-fl/TMP/testbed/django__django-14500/django/db/models/query.py", line 962, in filter
    return self._filter_or_exclude(False, args, kwargs)
  File "/data/swe-fl/TMP/testbed/django__django-14500/django/db/models/query.py", line 980, in _filter_or_exclude
    clone._filter_or_exclude_inplace(negate, args, kwargs)
  File "/data/swe-fl/TMP/testbed/django__django-14500/django/db/models/query.py", line 987, in _filter_or_exclude_inplace
    self._query.add_q(Q(*args, **kwargs))
  File "/data/swe-fl/TMP/testbed/django__django-14500/django/db/models/sql/query.py", line 1375, in add_q
    clause, _ = self._add_q(q_object, self.used_aliases)
  File "/data/swe-fl/TMP/testbed/django__django-14500/django/db/models/sql/query.py", line 1394, in _add_q
    child_clause, needed_inner = self.build_filter(
  File "/data/swe-fl/TMP/testbed/django__django-14500/django/db/models/sql/query.py", line 1269, in build_filter
    lookups, parts, reffed_expression = self.solve_lookup_type(arg)
  File "/data/swe-fl/TMP/testbed/django__django-14500/django/db/models/sql/query.py", line 1098, in solve_lookup_type
    _, field, _, lookup_parts = self.names_to_path(lookup_splitted, self.get_meta())
  File "/data/swe-fl/TMP/testbed/django__django-14500/django/db/models/sql/query.py", line 1520, in names_to_path
    raise FieldError("Cannot resolve keyword '%s' into field. "
django.core.exceptions.FieldError: Cannot resolve keyword 'replaced_migrations' into field. Choices are: app, applied, id, name

======================================================================
ERROR: test_unrelated_model_lookups_forwards (migrations.test_executor.ExecutorTests)
#24123 - All models of apps already applied which are
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/data/swe-fl/TMP/testbed/django__django-14500/tests/migrations/test_executor.py", line 425, in test_unrelated_model_lookups_forwards
    self.assertTableNotExists("lookuperror_a_a1")
  File "/data/swe-fl/TMP/testbed/django__django-14500/tests/migrations/test_base.py", line 41, in assertTableNotExists
    self.assertNotIn(table, connections[using].introspection.table_names(cursor))
  File "/root/miniforge3/envs/django__django__4.0/lib/python3.8/unittest/case.py", line 1186, in assertNotIn
    self.fail(self._formatMessage(msg, standardMsg))
  File "/root/miniforge3/envs/django__django__4.0/lib/python3.8/unittest/case.py", line 753, in fail
    raise self.failureException(msg)
AssertionError: 'lookuperror_a_a1' unexpectedly found in ['auth_group', 'auth_group_permissions', 'auth_permission', 'auth_user', 'auth_user_groups', 'auth_user_user_permissions', 'django_admin_log', 'django_content_type', 'django_migrations', 'django_session', 'django_site', 'lookuperror_a_a1', 'lookuperror_a_a2', 'lookuperror_a_a3', 'lookuperror_a_a4', 'lookuperror_b_b1', 'lookuperror_b_b2', 'lookuperror_c_c1', 'lookuperror_c_c2', 'migrations_author', 'migrations_editor', 'migrations_modelwithcustombase', 'migrations_project', 'migrations_project_tasks', 'migrations_publisher', 'migrations_task', 'migrations_task_projects', 'migrations_tribble', 'migrations_unmigratedmodel']

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/data/swe-fl/TMP/testbed/django__django-14500/django/test/utils.py", line 430, in inner
    return func(*args, **kwargs)
  File "/data/swe-fl/TMP/testbed/django__django-14500/tests/migrations/test_executor.py", line 446, in test_unrelated_model_lookups_forwards
    executor.migrate([
  File "/data/swe-fl/TMP/testbed/django__django-14500/django/db/migrations/executor.py", line 121, in migrate
    state = self._migrate_all_backwards(plan, full_plan, fake=fake)
  File "/data/swe-fl/TMP/testbed/django__django-14500/django/db/migrations/executor.py", line 196, in _migrate_all_backwards
    self.unapply_migration(states[migration], migration, fake=fake)
  File "/data/swe-fl/TMP/testbed/django__django-14500/django/db/migrations/executor.py", line 258, in unapply_migration
    self.recorder.record_unapplied(migration.app_label, migration.name)
  File "/data/swe-fl/TMP/testbed/django__django-14500/django/db/migrations/recorder.py", line 95, in record_unapplied
    for squashed_migration in self.migration_qs.filter(app=app, replaced_migrations__contains=name).values_list('name', flat=True):
  File "/data/swe-fl/TMP/testbed/django__django-14500/django/db/models/query.py", line 962, in filter
    return self._filter_or_exclude(False, args, kwargs)
  File "/data/swe-fl/TMP/testbed/django__django-14500/django/db/models/query.py", line 980, in _filter_or_exclude
    clone._filter_or_exclude_inplace(negate, args, kwargs)
  File "/data/swe-fl/TMP/testbed/django__django-14500/django/db/models/query.py", line 987, in _filter_or_exclude_inplace
    self._query.add_q(Q(*args, **kwargs))
  File "/data/swe-fl/TMP/testbed/django__django-14500/django/db/models/sql/query.py", line 1375, in add_q
    clause, _ = self._add_q(q_object, self.used_aliases)
  File "/data/swe-fl/TMP/testbed/django__django-14500/django/db/models/sql/query.py", line 1394, in _add_q
    child_clause, needed_inner = self.build_filter(
  File "/data/swe-fl/TMP/testbed/django__django-14500/django/db/models/sql/query.py", line 1269, in build_filter
    lookups, parts, reffed_expression = self.solve_lookup_type(arg)
  File "/data/swe-fl/TMP/testbed/django__django-14500/django/db/models/sql/query.py", line 1098, in solve_lookup_type
    _, field, _, lookup_parts = self.names_to_path(lookup_splitted, self.get_meta())
  File "/data/swe-fl/TMP/testbed/django__django-14500/django/db/models/sql/query.py", line 1520, in names_to_path
    raise FieldError("Cannot resolve keyword '%s' into field. "
django.core.exceptions.FieldError: Cannot resolve keyword 'replaced_migrations' into field. Choices are: app, applied, id, name

======================================================================
FAIL: test_process_callback (migrations.test_executor.ExecutorTests)
#24129 - Tests callback process
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/data/swe-fl/TMP/testbed/django__django-14500/django/test/utils.py", line 430, in inner
    return func(*args, **kwargs)
  File "/data/swe-fl/TMP/testbed/django__django-14500/tests/migrations/test_executor.py", line 543, in test_process_callback
    self.assertTableNotExists("migrations_author")
  File "/data/swe-fl/TMP/testbed/django__django-14500/tests/migrations/test_base.py", line 41, in assertTableNotExists
    self.assertNotIn(table, connections[using].introspection.table_names(cursor))
AssertionError: 'migrations_author' unexpectedly found in ['auth_group', 'auth_group_permissions', 'auth_permission', 'auth_user', 'auth_user_groups', 'auth_user_user_permissions', 'django_admin_log', 'django_content_type', 'django_migrations', 'django_session', 'django_site', 'migrations_author', 'migrations_editor', 'migrations_modelwithcustombase', 'migrations_project', 'migrations_project_tasks', 'migrations_publisher', 'migrations_task', 'migrations_task_projects', 'migrations_tribble', 'migrations_unmigratedmodel']

======================================================================
FAIL: test_run (migrations.test_executor.ExecutorTests)
Tests running a simple set of migrations.
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/data/swe-fl/TMP/testbed/django__django-14500/django/test/utils.py", line 430, in inner
    return func(*args, **kwargs)
  File "/data/swe-fl/TMP/testbed/django__django-14500/tests/migrations/test_executor.py", line 44, in test_run
    self.assertTableNotExists("migrations_author")
  File "/data/swe-fl/TMP/testbed/django__django-14500/tests/migrations/test_base.py", line 41, in assertTableNotExists
    self.assertNotIn(table, connections[using].introspection.table_names(cursor))
AssertionError: 'migrations_author' unexpectedly found in ['auth_group', 'auth_group_permissions', 'auth_permission', 'auth_user', 'auth_user_groups', 'auth_user_user_permissions', 'django_admin_log', 'django_content_type', 'django_migrations', 'django_session', 'django_site', 'migrations_author', 'migrations_editor', 'migrations_modelwithcustombase', 'migrations_project', 'migrations_project_tasks', 'migrations_publisher', 'migrations_task', 'migrations_task_projects', 'migrations_tribble', 'migrations_unmigratedmodel']

======================================================================
FAIL: test_run_with_squashed (migrations.test_executor.ExecutorTests)
Tests running a squashed migration from zero (should ignore what it replaces)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/data/swe-fl/TMP/testbed/django__django-14500/django/test/utils.py", line 430, in inner
    return func(*args, **kwargs)
  File "/data/swe-fl/TMP/testbed/django__django-14500/tests/migrations/test_executor.py", line 85, in test_run_with_squashed
    self.assertTableNotExists("migrations_author")
  File "/data/swe-fl/TMP/testbed/django__django-14500/tests/migrations/test_base.py", line 41, in assertTableNotExists
    self.assertNotIn(table, connections[using].introspection.table_names(cursor))
AssertionError: 'migrations_author' unexpectedly found in ['auth_group', 'auth_group_permissions', 'auth_permission', 'auth_user', 'auth_user_groups', 'auth_user_user_permissions', 'django_admin_log', 'django_content_type', 'django_migrations', 'django_session', 'django_site', 'migrations_author', 'migrations_editor', 'migrations_modelwithcustombase', 'migrations_project', 'migrations_project_tasks', 'migrations_publisher', 'migrations_task', 'migrations_task_projects', 'migrations_tribble', 'migrations_unmigratedmodel']

======================================================================
FAIL: test_soft_apply (migrations.test_executor.ExecutorTests)
Tests detection of initial migrations already having been applied.
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/data/swe-fl/TMP/testbed/django__django-14500/django/test/utils.py", line 430, in inner
    return func(*args, **kwargs)
  File "/data/swe-fl/TMP/testbed/django__django-14500/tests/migrations/test_executor.py", line 265, in test_soft_apply
    self.assertTableNotExists("migrations_author")
  File "/data/swe-fl/TMP/testbed/django__django-14500/tests/migrations/test_base.py", line 41, in assertTableNotExists
    self.assertNotIn(table, connections[using].introspection.table_names(cursor))
AssertionError: 'migrations_author' unexpectedly found in ['auth_group', 'auth_group_permissions', 'auth_permission', 'auth_user', 'auth_user_groups', 'auth_user_user_permissions', 'django_admin_log', 'django_content_type', 'django_migrations', 'django_session', 'django_site', 'migrations_author', 'migrations_editor', 'migrations_modelwithcustombase', 'migrations_project', 'migrations_project_tasks', 'migrations_publisher', 'migrations_task', 'migrations_task_projects', 'migrations_tribble', 'migrations_unmigratedmodel']

----------------------------------------------------------------------
Ran 22 tests in 0.765s

FAILED (failures=4, errors=9)
Destroying test database for alias 'default' ('file:memorydb_default?mode=memory&cache=shared')...
Destroying test database for alias 'other' ('file:memorydb_other?mode=memory&cache=shared')...

ERROR conda.cli.main_run:execute(125): `conda run ./tests/runtests.py --verbosity 2 --settings=test_sqlite --parallel 1 migrations.test_executor` failed. (See above for error)
