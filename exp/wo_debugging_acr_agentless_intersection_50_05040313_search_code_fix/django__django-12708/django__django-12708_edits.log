### django/db/backends/base/schema.py
<<<<<<< SEARCH
        constraint_names = self._constraint_names(
            model, columns, exclude=meta_constraint_names | meta_index_names,
            **constraint_kwargs
        )
        if len(constraint_names) != 1:
=======
        # Retrieve constraint names excluding only meta constraints (unique constraints), retaining meta indexes for count.
        constraint_names = self._constraint_names(
            model, columns, exclude=meta_constraint_names,
            **constraint_kwargs
        )
        if len(constraint_names) not in (1, 2):  # Expect either one or two constraints.
>>>>>>> REPLACE

### django/db/backends/base/schema.py
<<<<<<< SEARCH
            raise ValueError("Found wrong number (%s) of constraints for %s(%s)" % (
                len(constraint_names),
                model._meta.db_table,
                ", ".join(columns),
            ))
=======
            # Determine if both unique and index constraints exist and handle accordingly.
            raise ValueError("Found unexpected number (%s) of constraints for %s(%s). Ensure that index and unique constraints are appropriately defined." % (
                len(constraint_names),
                model._meta.db_table,
                ", ".join(columns),
            ))
>>>>>>> REPLACE
