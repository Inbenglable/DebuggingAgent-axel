### sympy/combinatorics/perm_groups.py
<<<<<<< SEARCH
                for i, r in enumerate(rep_blocks):
                    if len(r) > len(rep) and rep.issubset(r):
                        # i-th block system is not minimal
                        del num_blocks[i], blocks[i]
                        to_remove.append(rep_blocks[i])
                    elif len(r) < len(rep) and r.issubset(rep):
                        # the system being checked is not minimal
                        minimal = False
                        break
                # remove non-minimal representative blocks
                rep_blocks = [r for r in rep_blocks if r not in to_remove]
=======
                indices_to_remove = set()
                for i, r in enumerate(rep_blocks):
                    if len(r) > len(rep) and rep.issubset(r):
                        indices_to_remove.add(i)
                    elif len(r) < len(rep) and r.issubset(rep):
                        minimal = False
                        break
                
                # Filter lists based on collected indices
                num_blocks = [num_blocks[i] for i in range(len(num_blocks)) if i not in indices_to_remove]
                blocks = [blocks[i] for i in range(len(blocks)) if i not in indices_to_remove]
                rep_blocks = [rep_blocks[i] for i in range(len(rep_blocks)) if i not in indices_to_remove]
>>>>>>> REPLACE
