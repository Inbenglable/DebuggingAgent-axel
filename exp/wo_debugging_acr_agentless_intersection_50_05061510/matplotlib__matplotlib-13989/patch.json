{
    "search_replace_edits": [
        "### lib/matplotlib/axes/_axes.py\n<<<<<<< SEARCH\ndensity = bool(density) or bool(normed)\nif density and not stacked:\n    hist_kwargs = dict(density=density)\n=======\ndensity = bool(density) or bool(normed)\nif density and not stacked:\n    # Ensure range is respected for density computations.\n    hist_kwargs = dict(density=density)\n    if bin_range is not None:\n        hist_kwargs['range'] = bin_range\n>>>>>>> REPLACE\n",
        "### lib/matplotlib/axes/_axes.py\n<<<<<<< SEARCH\nfor i in range(nx):\n    # this will automatically overwrite bins,\n    # so that each histogram uses the same bins\n    m, bins = np.histogram(x[i], bins, weights=w[i], **hist_kwargs)\n=======\nfor i in range(nx):\n    # this will automatically overwrite bins,\n    # so that each histogram uses the same bins\n    if density:\n        # Use histogram_bin_edges to respect range for density computations\n        bins = histogram_bin_edges(x[i], bins=bins, range=bin_range)\n    m, bins = np.histogram(x[i], bins=bins, weights=w[i], **hist_kwargs)\n>>>>>>> REPLACE\n"
    ]
}