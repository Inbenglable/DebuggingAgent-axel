### reproduce.py
<<<<<<< SEARCH
def check_excessive_operations(operations):
    i = 0
    excessive_operations_found = False
    while i < len(operations) - 1:
        if (isinstance(operations[i], migrations.AddIndex) and
            isinstance(operations[i + 1], migrations.RemoveIndex) and
            operations[i].index.name == operations[i + 1].name):
            excessive_operations_found = True
            break
        i += 2
    if excessive_operations_found:
        raise AssertionError("Excessive AddIndex/RemoveIndex operations found.")
=======
def check_excessive_operations(operations):
    i = 0
    non_redundant_operations = []
    while i < len(operations):
        if (i < len(operations) - 1 and
            isinstance(operations[i], migrations.AddIndex) and
            isinstance(operations[i + 1], migrations.RemoveIndex) and
            operations[i].index.name == operations[i + 1].name):
            # Skip both operations if they are redundant
            i += 2
        else:
            # Add the current operation when it is not part of a redundant pair
            non_redundant_operations.append(operations[i])
            i += 1
    return non_redundant_operations
>>>>>>> REPLACE
