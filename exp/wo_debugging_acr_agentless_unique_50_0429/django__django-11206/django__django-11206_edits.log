### django/utils/numberformat.py
<<<<<<< SEARCH
        # Format values with more than 200 digits (an arbitrary cutoff) using
        # scientific notation to avoid high memory usage in {:f}'.format().
        _, digits, exponent = number.as_tuple()
        if abs(exponent) + len(digits) > 200:
            number = '{:e}'.format(number)
            coefficient, exponent = number.split('e')
            # Format the coefficient.
            coefficient = format(
                coefficient, decimal_sep, decimal_pos, grouping,
                thousand_sep, force_grouping, use_l10n,
            )
            return '{}e{}'.format(coefficient, exponent)
        else:
            str_number = '{:f}'.format(number)
=======
        # Format small values according to decimal_pos without using scientific
        # notation if decimal positions are provided.
        str_number = '{:f}'.format(number)
        int_part_zeros = len(str_number.split('.')[0].lstrip('0'))
        if decimal_pos is not None and exponent < 0 and int_part_zeros + abs(exponent) > decimal_pos:
            # If number is smaller than what can be encoded with decimal_pos
            # return a zero-decimal-formatted string
            return '0' + decimal_sep + '0' * decimal_pos
>>>>>>> REPLACE
