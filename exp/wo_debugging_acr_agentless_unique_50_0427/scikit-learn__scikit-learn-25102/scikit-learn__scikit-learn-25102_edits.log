### sklearn/utils/_set_output.py
<<<<<<< SEARCH
def _wrap_in_pandas_container(
    data_to_wrap,
    *,
    columns,
    index=None,
):
=======
def _wrap_in_pandas_container(
    data_to_wrap,
    *,
    columns,
    index=None,
    dtype_preserve=None,
):
>>>>>>> REPLACE

### sklearn/utils/_set_output.py
<<<<<<< SEARCH
    return pd.DataFrame(data_to_wrap, index=index, columns=columns)
=======
    if dtype_preserve is not None:
        dataframe = pd.DataFrame(data_to_wrap, index=index, columns=columns)
        original_dtypes = dtype_preserve
        for col in dataframe.columns.intersection(original_dtypes.index):
            dataframe[col] = dataframe[col].astype(original_dtypes[col])
        return dataframe

    return pd.DataFrame(data_to_wrap, index=index, columns=columns)
>>>>>>> REPLACE

### sklearn/utils/_set_output.py
<<<<<<< SEARCH
    return _wrap_in_pandas_container(
        data_to_wrap=data_to_wrap,
        index=getattr(original_input, "index", None),
        columns=estimator.get_feature_names_out,
    )
=======
    return _wrap_in_pandas_container(
        data_to_wrap=data_to_wrap,
        index=getattr(original_input, "index", None),
        columns=estimator.get_feature_names_out,
        dtype_preserve=getattr(original_input, 'dtypes', None),
    )
>>>>>>> REPLACE
