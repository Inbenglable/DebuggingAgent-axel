{
    "search_replace_edits": [
        "### django/db/migrations/operations/models.py\n<<<<<<< SEARCH\n    def state_forwards(self, app_label, state):\n=======\n    def state_forwards(self, app_label, state):\n        # Optimization: Combine consecutive AlterTogether operations where applicable\n        # Handle unique_together and index_together merging\n        model_options = state.models[app_label, self.name]._meta\n        current_option = getattr(model_options, self.option_name, None) or set()\n        new_option = self.option_value | current_option\n        setattr(model_options, self.option_name, new_option)\n>>>>>>> REPLACE\n",
        "### django/db/migrations/operations/models.py\n<<<<<<< SEARCH\n    def database_forwards(self, app_label, schema_editor, from_state, to_state):\n=======\n    def database_forwards(self, app_label, schema_editor, from_state, to_state):\n        # Optimization: Combine consecutive AlterTogether operations where applicable\n        model = to_state.apps.get_model(app_label, self.name)\n        if self.allow_migrate_model(schema_editor.connection.alias, model):\n            current_constraints = from_state.models[app_label, self.name_lower].options[self.option_name]\n            new_constraints = self.option_value | current_constraints\n            constraint_action = schema_editor.add_constraint if new_constraints else schema_editor.remove_constraint\n            constraint_action(model, new_constraints)\n>>>>>>> REPLACE\n"
    ]
}