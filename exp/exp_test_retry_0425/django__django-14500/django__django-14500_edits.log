### django/db/migrations/autodetector.py
<<<<<<< SEARCH
        for (app_label, model_name), model_state in self.to_state.models.items():
            if not model_state.options.get('managed', True):
                self.new_unmanaged_keys.add((app_label, model_name))
=======
        skip_apps = convert_apps if convert_apps else set()
        for (app_label, model_name), model_state in self.to_state.models.items():
            if not model_state.options.get('managed', True):
                self.new_unmanaged_keys.add((app_label, model_name))
            elif app_label not in skip_apps:
>>>>>>> REPLACE

### django/db/migrations/executor.py
<<<<<<< SEARCH
                self.recorder.record_unapplied(migration.app_label, migration.name)
=======
                self.recorder.record_unapplied(migration.app_label, migration.name)
                if migration.replaces:
                    # Ensure that squashed replacements are marked as unapplied
                    for app_label, name in migration.replaces:
                        self.recorder.record_unapplied(app_label, name)
>>>>>>> REPLACE
