{
    "search_replace_edits": [
        "### django/db/migrations/writer.py\n<<<<<<< SEARCH\n        # Format imports nicely, swapping imports of functions from migration files\n        # for comments\n        migration_imports = set()\n        for line in list(imports):\n            if re.match(r\"^import (.*)\\.\\d+[^\\s]*$\", line):\n                migration_imports.add(line.split(\"import\")[1].strip())\n                imports.remove(line)\n                self.needs_manual_porting = True\n\n        # django.db.migrations is always used, but models import may not be.\n        # If models import exists, merge it with migrations import.\n        if \"from django.db import models\" in imports:\n            imports.discard(\"from django.db import models\")\n            imports.add(\"from django.db import migrations, models\")\n        else:\n            imports.add(\"from django.db import migrations\")\n\n        # Sort imports by the package / module to be imported (the part after\n        # \"from\" in \"from ... import ...\" or after \"import\" in \"import ...\").\n        sorted_imports = sorted(imports, key=lambda i: i.split()[1])\n        items[\"imports\"] = \"\\n\".join(sorted_imports) + \"\\n\" if imports else \"\"\n=======\n        # Separate import statements into 'import xxx' and 'from xxx import'\n        module_imports = {line for line in imports if line.startswith(\"import \")}\n        from_imports = imports.difference(module_imports)\n\n        # Sort imports with 'import xxx' before 'from xxx import ...'\n        sorted_imports = sorted(module_imports) + sorted(from_imports)\n\n        items[\"imports\"] = \"\\n\".join(sorted_imports) + \"\\n\" if imports else \"\"\n>>>>>>> REPLACE\n"
    ]
}