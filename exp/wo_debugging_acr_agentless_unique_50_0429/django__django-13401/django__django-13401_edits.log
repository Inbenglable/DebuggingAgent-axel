### django/db/models/fields/__init__.py
<<<<<<< SEARCH
    def __eq__(self, other):
        # Needed for @total_ordering
        if isinstance(other, Field):
            return self.creation_counter == other.creation_counter
        return NotImplemented
=======
    def __eq__(self, other):
        # Needed for @total_ordering
        if isinstance(other, Field):
            return (self.creation_counter == other.creation_counter) and (self.model == other.model)
        return NotImplemented
>>>>>>> REPLACE

### django/db/models/fields/__init__.py
<<<<<<< SEARCH
    def __hash__(self):
        return hash(self.creation_counter)
=======
    def __hash__(self):
        return hash((self.creation_counter, self.model))
>>>>>>> REPLACE

### django/db/models/fields/__init__.py
<<<<<<< SEARCH
    def __lt__(self, other):
        # This is needed because bisect does not take a comparison function.
        if isinstance(other, Field):
            return self.creation_counter < other.creation_counter
        return NotImplemented
=======
    def __lt__(self, other):
        # This is needed because bisect does not take a comparison function.
        if isinstance(other, Field):
            if self.creation_counter != other.creation_counter:
                return self.creation_counter < other.creation_counter
            return self.model < other.model
        return NotImplemented
>>>>>>> REPLACE
