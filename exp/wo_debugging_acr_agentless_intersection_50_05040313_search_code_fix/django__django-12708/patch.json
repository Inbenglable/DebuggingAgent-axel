{
    "search_replace_edits": [
        "### django/db/backends/base/schema.py\n<<<<<<< SEARCH\n        constraint_names = self._constraint_names(\n            model, columns, exclude=meta_constraint_names | meta_index_names,\n            **constraint_kwargs\n        )\n        if len(constraint_names) != 1:\n=======\n        # Retrieve constraint names excluding only meta constraints (unique constraints), retaining meta indexes for count.\n        constraint_names = self._constraint_names(\n            model, columns, exclude=meta_constraint_names,\n            **constraint_kwargs\n        )\n        if len(constraint_names) not in (1, 2):  # Expect either one or two constraints.\n>>>>>>> REPLACE\n",
        "### django/db/backends/base/schema.py\n<<<<<<< SEARCH\n            raise ValueError(\"Found wrong number (%s) of constraints for %s(%s)\" % (\n                len(constraint_names),\n                model._meta.db_table,\n                \", \".join(columns),\n            ))\n=======\n            # Determine if both unique and index constraints exist and handle accordingly.\n            raise ValueError(\"Found unexpected number (%s) of constraints for %s(%s). Ensure that index and unique constraints are appropriately defined.\" % (\n                len(constraint_names),\n                model._meta.db_table,\n                \", \".join(columns),\n            ))\n>>>>>>> REPLACE\n"
    ]
}