### sklearn/cluster/k_means_.py
<<<<<<< SEARCH
    if effective_n_jobs(n_jobs) == 1:
=======
    if effective_n_jobs(n_jobs) <= 1:
>>>>>>> REPLACE

### sklearn/cluster/k_means_.py
<<<<<<< SEARCH
        seeds = random_state.randint(np.iinfo(np.int32).max, size=n_init)
        results = Parallel(n_jobs=n_jobs, verbose=0)(
=======
        seeds = random_state.randint(np.iinfo(np.int32).max, size=n_init)
        parallel_random_state = check_random_state(random_state)
        results = Parallel(n_jobs=n_jobs, verbose=0)(
            delayed(kmeans_single)(X, sample_weight, n_clusters,
                                   max_iter=max_iter, init=init,
                                   verbose=verbose, tol=tol,
                                   precompute_distances=precompute_distances,
                                   x_squared_norms=x_squared_norms,
                                   random_state=parallel_random_state)
>>>>>>> REPLACE
