{
    "search_replace_edits": [
        "### sphinx/builders/linkcheck.py\n<<<<<<< SEARCH\ndef check_anchor(response: requests.requests.Response, anchor: str) -> bool:\n    \"\"\"Reads HTML data from a response object `response` searching for `anchor`.\n    Returns True if anchor was found, False otherwise.\n    \"\"\"\n    parser = AnchorCheckParser(anchor)\n    # Read file in chunks. If we find a matching anchor, we break\n    # the loop early in hopes not to have to download the whole thing.\n    for chunk in response.iter_content(chunk_size=4096, decode_unicode=True):\n        if isinstance(chunk, bytes):    # requests failed to decode\n            chunk = chunk.decode()      # manually try to decode it\n\n        parser.feed(chunk)\n        if parser.found:\n            break\n    parser.close()\n    return parser.found\n=======\n\ndef process_linkcheck_result(uri: str, response: requests.requests.Response, anchor: str) -> str:\n    \"\"\"Processes the result from a linkcheck, returning the result string.\"\"\"\n    if response.status_code >= 400:\n        return f\"{response.status_code} Client Error: {response.reason} for url: {uri}\"\n    \n    if response.headers.get('content-type').startswith('text/html'):\n        if not check_anchor(response, anchor):\n            return f\"Anchor '{anchor}' not found\"\n    return \"Working\"\n    \ndef check_anchor(response: requests.requests.Response, anchor: str) -> bool:\n    \"\"\"Reads HTML data from a response object `response` searching for `anchor`.\n    Returns True if anchor was found, False otherwise.\n    \"\"\"\n    parser = AnchorCheckParser(anchor)\n    # Read file in chunks. If we find a matching anchor, we break\n    # the loop early in hopes not to have to download the whole thing.\n    for chunk in response.iter_content(chunk_size=4096, decode_unicode=True):\n        if isinstance(chunk, bytes):    # requests failed to decode\n            chunk = chunk.decode()      # manually try to decode it\n\n        parser.feed(chunk)\n        if parser.found:\n            break\n    parser.close()\n    return parser.found\n>>>>>>> REPLACE\n"
    ]
}